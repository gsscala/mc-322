@startuml

' ======================== CLASSES ========================

class Main {
    + main(String[] args) : void
}

class Ambiente {
    - largura : int
    - altura : int
    - nome : String
    - umidade : int
    - robos : ArrayList<Robo>
    - obstaculos : ArrayList<Obstaculo>
    + adicionarRobo(robo: Robo) : void
    + removerRobo(robo: Robo) : void
    + adicionarObstaculo(obstaculo: Obstaculo) : void
    + removerObstaculo(obstaculo: Obstaculo) : void
    + handleColisoes(posicaoX: int, posicaoY: int, altitude: int, roboAtual: Robo) : boolean
    + hasObstacle(posicaoX: int, posicaoY: int, altitude: int) : boolean
    + dentroDosLimites(x: int, y: int) : boolean
    + dentroDosLimites(x: int, y: int, z: int, altitudeMaxima: int) : boolean
}

class Robo {
    - nome : String
    - posicaoX : int
    - posicaoY : int
    - direcao : String
    - isVivo : boolean
    - bateria : int
    - ambiente : Ambiente
    - sensores : ArrayList<Sensor>
    + addSensor(sensor: Sensor) : void
    + mover(deltaX: int, deltaY: int) : void
}

class RoboAereo {
    - altitude : int
    - altitudeMaxima : int
}

class RoboAleatorio {
    + mover() : void
}

class RoboAtirador {
    - arma : String
    + atirar() : void
}

class RoboTerrestre {
    - velocidadeMaxima : int
    + mover(int velocidade) : void
}

class Obstaculo {
    - xIni : int
    - yIni : int
    - xFim : int
    - yFim : int
    - tipo : TipoObstaculo
    + dentroDosLimites(x: int, y: int) : boolean
    + handleColisao(robo: Robo) : boolean
}

class TipoObstaculo {
    - altura : int
    - bloqueiaPassagem : boolean
    - letal : boolean
    - nivelUmidade : int
    - descricao : String
    + POCA : TipoObstaculo
    + PEDRA : TipoObstaculo
    + PREDIO : TipoObstaculo
    + CACTO : TipoObstaculo
}

class MenuInterativo {
    - ambienteAtual : Ambiente
    + run() : void
    + handleInput(input: String) : void
    + showHelp() : void
    + showRobos() : void
    + showStatus() : void
    + move(args: String[]) : void
    + skill(args: String[]) : void
    + monitorar(args: String[]) : void
}

' Sensores
abstract class Sensor {
    - alcance : int
}

class SensorProximidade {
    + monitorar() : void
}

class SensorUmidade {
    + monitorar()
}

' ======================== RELACIONAMENTOS ========================

Main --> Ambiente
Main --> RoboAleatorio
Main --> RoboAtirador
Main --> RoboTerrestre
Main --> RoboAereo
Main --> Robo
Main --> MenuInterativo
Main --> Obstaculo

Ambiente "1" --> "*" Robo : contém
Ambiente "1" --> "*" Obstaculo : contém

Obstaculo "1" --> "1" TipoObstaculo : possui

Robo "1" *-- "*" Sensor : possui

RoboAereo -|> Robo
RoboAleatorio -|> RoboAereo
RoboAtirador -|> RoboAereo
RoboTerrestre -|> Robo

SensorProximidade -|> Sensor
SensorUmidade -|> Sensor

MenuInterativo "1" --> Ambiente : interage com

Sensor "1" --> "*" Obstaculo : detecta

@enduml
