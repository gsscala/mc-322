@startuml
!theme plain
skinparam class {
    BackgroundColor<<Interface>> #A9DCDF
    BackgroundColor<<Enum>> #FFD966
    BackgroundColor<<Exception>> #FF9999
    BackgroundColor<<Class>> #D5E8D4
    ArrowColor #007777
    BorderColor #333333
}

skinparam package {
    BackgroundColor #F0F0F0
    BorderColor #AAAAAA
}

skinparam defaultTextAlignment center
skinparam shadowing false
hide circle

package ambiente #CCF2FF {
    class Ambiente {
        - dimensões: int x int x int
        - nome: String
        - umidade: int
        - entidades: ArrayList<Entidade>
        - mapa: TipoEntidade[][][]
        - centralComunicacao: CentralComunicacao
        + inicializaMapa()
        + visualizarAmbiente()
        + moverRoboMapa()
        + handleColisoes()
        + adicionarEntidade()
        + removerEntidade()
    }

    class ForaMapaException <<Exception>> {}
}

package comunicacao #FFE6CC {
    interface Comunicavel <<Interface>> {
        + enviarMensagem()
        + receberMensagem()
    }

    class CentralComunicacao {
        + registrarMensagem()
        + exibirMensagens()
    }

    class ErroComunicacaoException <<Exception>> {}
}

package entity #D4C2FC {
    interface Entidade <<Interface>> {
        + getPosicaoX()
        + getPosicaoY()
        + getTipo()
    }

    enum TipoEntidade <<Enum>> {
        VAZIO
        ROBO
        OBSTACULO
        DESCONHECIDO
    }
}

package menus #FFD8E6 {
    class MenuInterativo {
        + run()
        - handleInput()
    }
}

package obstaculos #FFF2CC {
    class ColisaoException <<Exception>> {}

    class Obstaculo {
        - área: Rectangle
        - tipo: TipoObstaculo
        + handleColisao()
        + dentroDosLimites()
    }

    enum TipoObstaculo <<Enum>> {
        POCA
        PEDRA
        PREDIO
        CACTO
    }
}

package robos #DAF7A6 {
    interface EnchedorDeSaco <<Interface>> {
        + encherOSaco()
    }

    enum EstadoRobo <<Enum>> {
        LIGADO
        DESLIGADO
        MORTO
    }

    interface Explodidor <<Interface>> {
        + explodir()
    }

    interface Ladrao <<Interface>> {
        + roubar()
    }

    class Robo {
        - posição: Point
        - direção: String
        - estado: EstadoRobo
        - bateria: int
        + mover()
        + roubar()
        + executarTarefa()
    }

    class RoboAereo {
        - altitude: int
        + subir()
        + descer()
    }

    class RoboAleatorio {
        + moverAleatório()
        + explodir()
    }

    class RoboAtirador {
        - arma: String
        + atirar()
        + encherOSaco()
        + acionarSensores()
    }

    class RoboDesligadoException <<Exception>> {}
    class RoboNotFoundException <<Exception>> {}

    class RoboTerrestre {
        - velocidadeMaxima: int
        + moverComVelocidade()
    }

    class TaskNotFoundException <<Exception>> {}
}

package sensores #FFCC99 {
    class NaoSensoriavelException <<Exception>> {}

    class Sensor {
        - raio: double
        + monitorar()
    }

    interface Sensoreavel <<Interface>> {
        + acionarSensores()
    }

    class SensorProximidade {
        + monitorar()
    }

    class SensorUmidade {
        + monitorar()
    }
}

package utils #E6CCFF {
    class DistanceCalculator {
        + calculateDistance()
    }

    class RandomNumberGenerator {
        + generate()
    }

    class RandomStringGenerator {
        + generatePrintableRandomString()
    }
}

' Color Legend '
legend right
  <b>Color Legend</b>
  | Color         | Meaning         |
  | :------------ | :-------------- |
  | #A9DCDF       | Interfaces      |
  | #FFD966       | Enums           |
  | #FF9999       | Exceptions      |
  | #D5E8D4       | Classes         |
  | Package Colors| Domain grouping |
endlegend

' Relationships '
RoboAereo --|> Robo
RoboAleatorio --|> RoboAereo
RoboAtirador --|> RoboAereo
RoboTerrestre --|> Robo

Robo ..|> Entidade
Robo ..|> Ladrao
Obstaculo ..|> Entidade
RoboAereo ..|> Comunicavel
RoboTerrestre ..|> Comunicavel
RoboAtirador ..|> Comunicavel
RoboAtirador ..|> EnchedorDeSaco
RoboAleatorio ..|> Explodidor
SensorProximidade --|> Sensor
SensorUmidade --|> Sensor

Ambiente "1" *-- "entidades *" Entidade
Ambiente "1" *-- "mapa" TipoEntidade
Ambiente "1" o-- "1" CentralComunicacao
MenuInterativo --> "1" Ambiente
Robo "1" *-- "sensores *" Sensor
Sensor "1" --> "1" Robo

Obstaculo "1" --> "1" TipoObstaculo
DistanceCalculator "1" --> "2" Entidade
RoboAtirador "1" --> "*" Sensor

ForaMapaException --|> Exception
ColisaoException --|> Exception
ErroComunicacaoException --|> Exception
RoboDesligadoException --|> Exception
RoboNotFoundException --|> Exception
TaskNotFoundException --|> Exception
NaoSensoriavelException --|> Exception

Robo ..> ColisaoException
Robo ..> ForaMapaException
Ambiente ..> ForaMapaException
Ambiente ..> ColisaoException
Obstaculo ..> ColisaoException
Robo ..> TaskNotFoundException
Robo ..> ErroComunicacaoException
Robo ..> RoboDesligadoException
MenuInterativo ..> RoboNotFoundException
MenuInterativo ..> TaskNotFoundException
MenuInterativo ..> NaoSensoriavelException
@enduml